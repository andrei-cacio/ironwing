{"name":"ironwingjs","tagline":"ironwingjs is a lightweight front-end library which offers CRUD manipulation over a RESTful API","body":"# About\r\n\r\nIn a few words, **ironwingjs** is a lightweight, framework-agnostic JavaScript library. **ironginwjs** is ment to be super easy to use and easy to integrate on any app. Out of the box it offers CRUD manipulation over a REST API interface.\r\n\r\n### Version\r\n0.7.0\r\n\r\n### Installation\r\n\r\n```sh\r\n$ bower install ironwing\r\n# or\r\n$ npm install ironwing\r\n```\r\n\r\n### How it works\r\n___\r\n#### Adapters\r\n\r\nAn adapter is an object which follows a predefined interface so that it can be integrated with ironwing. Out of the box, ironwingjs comes with a ***XHR JSON*** adapter which is an intermediate object that communicates with the `XMLHttpRequest` API. The developer doesn't interact directly with the adapter. The adapter is used *“under the hood”* by **ironwing**. The main purpose of adapters is to easily modify how **ironwing** interacts with the server. Anyone can write their own adapter and use it with ironwingjs. To load an adapter you simply call the `useAdapter` method first.\r\nHere's a simple example:\r\n```javascript\r\nvar ironwing = require('ironwing');\r\n/**\r\n * Load an adapter\r\n * @param  {String} adapterName [The adapter's name (eg. JSON)]\r\n * @param  {Array}  args        [An array of arguments]\r\n */\r\nironwing.useAdapter('JSON', ['/api']);\r\n```\r\n### Storage\r\n\r\nBy default, **ironwing** has a local *(heap)* storage. After **ironwing** fetches a new model, by default it stores it locally for later use. So for example if we were to fetch data from an endpoint called ***/users/100***:\r\n```javascript\r\nironwing('users', 100).then(function(user){ \r\n    console.log(user.attr.name); \r\n});\r\n```\r\nWe can later on retrieve that model from memory without any extra trips to the server, by simply calling\r\n```javascript \r\nvar userModel =  ironwing.storage.find('users', 100);\r\n```\r\nOr, if we fetched a collection\r\n```javascript\r\nironwing('users',).then(function(users){ console.log(users.length); });\r\n```\r\nwe can later on get one or all users type model\r\n```javascript\r\nvar usersCollection =  ironwing.storage.findAll('users');\r\n```\r\nFor the moment, only the default storage can be used. In future releases we hope to implement a way to switch between storage implementations like an adapter for *local storage* so you can save the state of your models after refresh.\r\n\r\n### Proxy objects\r\n\r\nThe constructor method ironwing() is basically a factory method which returns `Model` instances. Each model exposes CRUD methods for manipulating your data. However, **ironwing** never modifies the raw JSON data directly. It exposes a ***proxy object*** as an intermediate. Each model object has a `.attr` object which contains a camel cased transformation of the JSON response. Everything you edit on the *attr proxy object*, it will be later synced with the original raw response and sent to the back-end. This technique offers control over what gets edited and what doesn't. In future releases, with the help of the proxy object, some cool features can be added like validators on attributes.\r\n\r\nA quick create and update example:\r\n```javascript\r\nvar ironwing = require('ironwing');\r\nvar userData = {\r\n    first_name: 'Jon',\r\n    last_name: 'Doe';\r\n};\r\n\r\nironwing.useAdapter('JSON', ['/api']);\r\nironwing.create('users', userData).then(function(userModel) {\r\n    /**\r\n    * a POST request is sent to the server\r\n    * /api/users\r\n    */\r\n    userModel.attr.firstName = 'Jon';\r\n    userModel.attr.lastName = 'Doe';\r\n\r\n    userModel.update().then(function() {\r\n        /**\r\n        * a PUT request is sent to the server\r\n        * /api/users/:id\r\n        */\r\n    });\r\n});\r\n```\r\n\r\nLicense\r\n----\r\n\r\nMIT","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}